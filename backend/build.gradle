plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.3'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'nu.studer.jooq' version '10.1'
}

group = 'com.bitlake'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(24)
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-jooq'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.flywaydb:flyway-core'
	implementation 'org.flywaydb:flyway-database-postgresql'
	implementation 'org.mapstruct:mapstruct:1.6.3'
	implementation 'io.jsonwebtoken:jjwt-api:0.12.6'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.6'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.6'
	annotationProcessor 'org.mapstruct:mapstruct-processor:1.6.3'
	runtimeOnly 'org.postgresql:postgresql'
	jooqGenerator 'org.postgresql:postgresql'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.boot:spring-boot-testcontainers'
	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation 'org.testcontainers:junit-jupiter'
	testImplementation 'org.assertj:assertj-core:3.27.2'
	testImplementation 'org.testcontainers:postgresql'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
	useJUnitPlatform()
}

// Add JOOQ configuration
jooq {
	version = "3.19.24"
	configurations {
		main {
			generateSchemaSourceOnCompilation = true  // Generate sources during build
			generationTool {
				jdbc {
					driver = 'org.postgresql.Driver'
					url = 'jdbc:postgresql://localhost:5432/md_store'
					user = 'postgres'
					password = 'root'
				}
				generator {
					name = 'org.jooq.codegen.DefaultGenerator'
					database {
						name = 'org.jooq.meta.postgres.PostgresDatabase'
						inputSchema = 'public'
						includes = '.*'
						excludes = 'flyway_schema_history'
					}
					target {
						packageName = 'com.bitlake.backend.generated'
						directory = 'src/generated/java'
					}
					strategy.name = 'org.jooq.codegen.DefaultGeneratorStrategy'
				}
			}
		}
	}
}

// Add this to ensure the generated sources are recognized
sourceSets {
	main {
		java {
			srcDirs += ['src/generated/java']
		}
	}
}

// Add this to clean generated sources
clean {
	delete file('src/generated/java')
}

